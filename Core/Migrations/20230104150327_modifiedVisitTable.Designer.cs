// <auto-generated />
using System;
using Core.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Core.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230104150327_modifiedVisitTable")]
    partial class modifiedVisitTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Models.BookingGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CompanyBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<double?>("ExpectedCostPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ExpectedDateOfArrival")
                        .HasColumnType("datetime2");

                    b.Property<double?>("ExpectedPrice")
                        .HasColumnType("float");

                    b.Property<int?>("MotalityRecorded")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("QuantityArrived")
                        .HasColumnType("int");

                    b.Property<int?>("QuantityLeft")
                        .HasColumnType("int");

                    b.Property<int?>("QuantitySold")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SupplyDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("SupplyPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CompanyBranchId");

                    b.HasIndex("ProductId");

                    b.ToTable("BookingGroups");
                });

            modelBuilder.Entity("Core.Models.Breed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CompanyBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyBranchId");

                    b.ToTable("Breeds");
                });

            modelBuilder.Entity("Core.Models.CommonDropDown", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CompanyBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DropdownKey")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyBranchId");

                    b.ToTable("CommonDropDowns");
                });

            modelBuilder.Entity("Core.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Core.Models.CompanyBranch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMainBranch")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyBranches");
                });

            modelBuilder.Entity("Core.Models.CompanyModule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModuleCostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubcriptionStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ModuleCostId");

                    b.ToTable("CompanyModules");
                });

            modelBuilder.Entity("Core.Models.CompanySetting", b =>
                {
                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("DOCBookingModule")
                        .HasColumnType("bit");

                    b.Property<bool>("StoreModule")
                        .HasColumnType("bit");

                    b.Property<bool>("TransactionModule")
                        .HasColumnType("bit");

                    b.Property<bool>("VaccineModule")
                        .HasColumnType("bit");

                    b.HasKey("CompanyId");

                    b.ToTable("CompanySettings");
                });

            modelBuilder.Entity("Core.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CompanyBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Profession")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyBranchId");

                    b.HasIndex("GenderId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Core.Models.CustomerBooking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<double?>("Balance")
                        .HasColumnType("float");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("BookingGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("QuantityBooked")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double?>("TotalPaid")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BookingGroupId");

                    b.HasIndex("CompanyBranchId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerBookings");
                });

            modelBuilder.Entity("Core.Models.CustomerBookingPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<Guid?>("CompanyBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerBookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatePaid")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyBranchId");

                    b.HasIndex("CustomerBookingId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("CustomerBookingPayments");
                });

            modelBuilder.Entity("Core.Models.GuestBooking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("CompanyBranchId");

                    b.ToTable("GuestBookings");
                });

            modelBuilder.Entity("Core.Models.Impersonation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("AmTheRealUser")
                        .HasColumnType("bit");

                    b.Property<string>("CompanyAdminId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateImpersonated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateSessionEnded")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EndSession")
                        .HasColumnType("bit");

                    b.Property<string>("SuperAdminUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Impersonations");
                });

            modelBuilder.Entity("Core.Models.Measurementunit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CompanyBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyBranchId");

                    b.ToTable("Measurementunits");
                });

            modelBuilder.Entity("Core.Models.ModuleCost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Discription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("NoOfDays")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("ModuleCosts");
                });

            modelBuilder.Entity("Core.Models.ModuleOrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModuleCostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaystackSubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ModuleCostId");

                    b.HasIndex("PaystackSubscriptionId");

                    b.ToTable("ModuleOrderItems");
                });

            modelBuilder.Entity("Core.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("BreedId")
                        .HasColumnType("int");

                    b.Property<string>("CaseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Colour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CompanyBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialMarking")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BreedId");

                    b.HasIndex("CompanyBranchId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("GenderId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Core.Models.PaymentMeans", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CommonDropDownId")
                        .HasColumnType("int");

                    b.Property<Guid?>("CompanyBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommonDropDownId");

                    b.HasIndex("CompanyBranchId");

                    b.ToTable("PaymentMeans");
                });

            modelBuilder.Entity("Core.Models.Paystack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GuestBookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WalletHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("access_code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("authorization_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("card_type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("channel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("country_code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("domain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("exp_month")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("exp_year")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fees")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gateway_response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ip_address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("last4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("reusable")
                        .HasColumnType("bit");

                    b.Property<string>("signature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("transaction_date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GuestBookingId");

                    b.HasIndex("WalletHistoryId");

                    b.ToTable("Paystacks");
                });

            modelBuilder.Entity("Core.Models.PaystackSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("access_code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("authorization_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("card_type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("channel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("country_code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("domain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("exp_month")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("exp_year")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fees")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gateway_response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ip_address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("last4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("reusable")
                        .HasColumnType("bit");

                    b.Property<string>("signature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("transaction_date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("PaystackSubscriptions");
                });

            modelBuilder.Entity("Core.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CompanyBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyBranchId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Core.Models.ProductInventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<double>("AmountPerProduct")
                        .HasColumnType("float");

                    b.Property<Guid?>("CompanyBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("MeasurementunitId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("ShopCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyBranchId");

                    b.HasIndex("MeasurementunitId");

                    b.HasIndex("ShopCategoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ProductInventories");
                });

            modelBuilder.Entity("Core.Models.ProductLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CompanyBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NewQuantity")
                        .HasColumnType("int");

                    b.Property<int>("OldQauntity")
                        .HasColumnType("int");

                    b.Property<int>("ProductActivity")
                        .HasColumnType("int");

                    b.Property<int>("ProductInventoryId")
                        .HasColumnType("int");

                    b.Property<int>("Qauntity")
                        .HasColumnType("int");

                    b.Property<double>("SellingPrice")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyBranchId");

                    b.HasIndex("ProductInventoryId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductLogs");
                });

            modelBuilder.Entity("Core.Models.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CompanyBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyBranchId");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("Core.Models.ProductVaccine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CompanyBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Week")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyBranchId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVaccines");
                });

            modelBuilder.Entity("Core.Models.Routine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CompanyBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CurrentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EmailAllowed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("NextDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Purpose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SMSAllowed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyBranchId");

                    b.HasIndex("PatientId");

                    b.ToTable("Routines");
                });

            modelBuilder.Entity("Core.Models.SaleDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SalesLogId")
                        .HasColumnType("int");

                    b.Property<double>("SellingPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.HasIndex("SalesLogId");

                    b.ToTable("SaleDetails");
                });

            modelBuilder.Entity("Core.Models.SalesLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CompanyBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DepositType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalesDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalPaid")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyBranchId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("SalesLogs");
                });

            modelBuilder.Entity("Core.Models.SalesPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("AmountPaid")
                        .HasColumnType("float");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<Guid?>("CompanyBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DepositType")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMeansId")
                        .HasColumnType("int");

                    b.Property<int>("SalesLogsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyBranchId");

                    b.HasIndex("PaymentMeansId");

                    b.HasIndex("SalesLogsId");

                    b.ToTable("SalesPayments");
                });

            modelBuilder.Entity("Core.Models.ScreenRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CompanyBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAssigned")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ScreenChecked")
                        .HasColumnType("bit");

                    b.Property<int>("ScreenId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyBranchId");

                    b.ToTable("ScreenRoles");
                });

            modelBuilder.Entity("Core.Models.ShopCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CompanyBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyBranchId");

                    b.ToTable("ShopCategories");
                });

            modelBuilder.Entity("Core.Models.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CompanyBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyBranchId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Core.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ConfirmDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConfirmedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ReceiptNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ConfirmedById");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Core.Models.TransactionSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CompanyBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("KeyWord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValidMessageChecker")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyBranchId");

                    b.ToTable("TransactionSettings");
                });

            modelBuilder.Entity("Core.Models.Treatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CompanyBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CompanyBranchId");

                    b.ToTable("Treatments");
                });

            modelBuilder.Entity("Core.Models.UserLoginLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeviceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLoginLogs");
                });

            modelBuilder.Entity("Core.Models.UserVerification", b =>
                {
                    b.Property<Guid?>("Token")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateUsed")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.ToTable("UserVerifications");
                });

            modelBuilder.Entity("Core.Models.VaccineSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CompanyBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDelivered")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("EmailSubscribed")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<bool>("SmsSubscribed")
                        .HasColumnType("bit");

                    b.Property<int>("SubscriptionStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyBranchId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("VaccineSubscriptions");
                });

            modelBuilder.Entity("Core.Models.Visit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CompanyBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefinitiveDiagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DifferentialDiagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnvironmentalHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedingHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneralExamination")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LaboratoryExamination")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LaboratoryResults")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LaboratorySamples")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("PhysicalExamination")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysiologicalExamination")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryComplaint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Treatment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TreatmentHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VaccinationHistory")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyBranchId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PatientId");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("Core.Models.VisitTreatment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("Discount")
                        .HasColumnType("float");

                    b.Property<int?>("TreatmentId")
                        .HasColumnType("int");

                    b.Property<int?>("VisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyBranchId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TreatmentId");

                    b.HasIndex("VisitId");

                    b.ToTable("VisitTreatments");
                });

            modelBuilder.Entity("Core.Models.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<Guid?>("CompanyBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyBranchId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("Core.Models.WalletHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<Guid?>("CompanyBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MyProperty")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PayStackResponses")
                        .HasColumnType("int");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<Guid?>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyBranchId");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletHistories");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Core.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CompanyBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeactivated")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CompanyBranchId");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Core.Models.BookingGroup", b =>
                {
                    b.HasOne("Core.Models.CompanyBranch", "CompanyBranch")
                        .WithMany()
                        .HasForeignKey("CompanyBranchId");

                    b.HasOne("Core.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("CompanyBranch");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Core.Models.Breed", b =>
                {
                    b.HasOne("Core.Models.CompanyBranch", "CompanyBranch")
                        .WithMany()
                        .HasForeignKey("CompanyBranchId");

                    b.Navigation("CompanyBranch");
                });

            modelBuilder.Entity("Core.Models.CommonDropDown", b =>
                {
                    b.HasOne("Core.Models.CompanyBranch", "CompanyBranch")
                        .WithMany()
                        .HasForeignKey("CompanyBranchId");

                    b.Navigation("CompanyBranch");
                });

            modelBuilder.Entity("Core.Models.Company", b =>
                {
                    b.HasOne("Core.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Core.Models.CompanyBranch", b =>
                {
                    b.HasOne("Core.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Core.Models.CompanyModule", b =>
                {
                    b.HasOne("Core.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Core.Models.ModuleCost", "ModuleCost")
                        .WithMany()
                        .HasForeignKey("ModuleCostId");

                    b.Navigation("Company");

                    b.Navigation("ModuleCost");
                });

            modelBuilder.Entity("Core.Models.CompanySetting", b =>
                {
                    b.HasOne("Core.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Core.Models.Customer", b =>
                {
                    b.HasOne("Core.Models.CompanyBranch", "CompanyBranch")
                        .WithMany()
                        .HasForeignKey("CompanyBranchId");

                    b.HasOne("Core.Models.CommonDropDown", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.Navigation("CompanyBranch");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("Core.Models.CustomerBooking", b =>
                {
                    b.HasOne("Core.Models.BookingGroup", "BookingGroup")
                        .WithMany("CustomerBookings")
                        .HasForeignKey("BookingGroupId");

                    b.HasOne("Core.Models.CompanyBranch", "CompanyBranch")
                        .WithMany()
                        .HasForeignKey("CompanyBranchId");

                    b.HasOne("Core.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.Navigation("BookingGroup");

                    b.Navigation("CompanyBranch");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Core.Models.CustomerBookingPayment", b =>
                {
                    b.HasOne("Core.Models.CompanyBranch", "CompanyBranch")
                        .WithMany()
                        .HasForeignKey("CompanyBranchId");

                    b.HasOne("Core.Models.CustomerBooking", "CustomerBooking")
                        .WithMany()
                        .HasForeignKey("CustomerBookingId");

                    b.HasOne("Core.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CompanyBranch");

                    b.Navigation("CustomerBooking");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Core.Models.GuestBooking", b =>
                {
                    b.HasOne("Core.Models.BookingGroup", "BookingGroup")
                        .WithMany()
                        .HasForeignKey("BookingId");

                    b.HasOne("Core.Models.CompanyBranch", "CompanyBranch")
                        .WithMany()
                        .HasForeignKey("CompanyBranchId");

                    b.Navigation("BookingGroup");

                    b.Navigation("CompanyBranch");
                });

            modelBuilder.Entity("Core.Models.Measurementunit", b =>
                {
                    b.HasOne("Core.Models.CompanyBranch", "CompanyBranch")
                        .WithMany()
                        .HasForeignKey("CompanyBranchId");

                    b.Navigation("CompanyBranch");
                });

            modelBuilder.Entity("Core.Models.ModuleOrderItem", b =>
                {
                    b.HasOne("Core.Models.ModuleCost", "ModuleCost")
                        .WithMany()
                        .HasForeignKey("ModuleCostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.PaystackSubscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("PaystackSubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModuleCost");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Core.Models.Patient", b =>
                {
                    b.HasOne("Core.Models.Breed", "Breed")
                        .WithMany()
                        .HasForeignKey("BreedId");

                    b.HasOne("Core.Models.CompanyBranch", "CompanyBranch")
                        .WithMany()
                        .HasForeignKey("CompanyBranchId");

                    b.HasOne("Core.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Core.Models.CommonDropDown", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Breed");

                    b.Navigation("CompanyBranch");

                    b.Navigation("Customer");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("Core.Models.PaymentMeans", b =>
                {
                    b.HasOne("Core.Models.CommonDropDown", "CommonDropDown")
                        .WithMany()
                        .HasForeignKey("CommonDropDownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.CompanyBranch", "CompanyBranch")
                        .WithMany()
                        .HasForeignKey("CompanyBranchId");

                    b.Navigation("CommonDropDown");

                    b.Navigation("CompanyBranch");
                });

            modelBuilder.Entity("Core.Models.Paystack", b =>
                {
                    b.HasOne("Core.Models.GuestBooking", "GuestBooking")
                        .WithMany()
                        .HasForeignKey("GuestBookingId");

                    b.HasOne("Core.Models.WalletHistory", "WalletHistory")
                        .WithMany()
                        .HasForeignKey("WalletHistoryId");

                    b.Navigation("GuestBooking");

                    b.Navigation("WalletHistory");
                });

            modelBuilder.Entity("Core.Models.PaystackSubscription", b =>
                {
                    b.HasOne("Core.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Core.Models.Product", b =>
                {
                    b.HasOne("Core.Models.CompanyBranch", "CompanyBranch")
                        .WithMany()
                        .HasForeignKey("CompanyBranchId");

                    b.HasOne("Core.Models.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId");

                    b.Navigation("CompanyBranch");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("Core.Models.ProductInventory", b =>
                {
                    b.HasOne("Core.Models.CompanyBranch", "CompanyBranch")
                        .WithMany()
                        .HasForeignKey("CompanyBranchId");

                    b.HasOne("Core.Models.Measurementunit", "Measurementunit")
                        .WithMany()
                        .HasForeignKey("MeasurementunitId");

                    b.HasOne("Core.Models.ShopCategory", "ShopCategory")
                        .WithMany()
                        .HasForeignKey("ShopCategoryId");

                    b.HasOne("Core.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.Navigation("CompanyBranch");

                    b.Navigation("Measurementunit");

                    b.Navigation("ShopCategory");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Core.Models.ProductLog", b =>
                {
                    b.HasOne("Core.Models.CompanyBranch", "CompanyBranch")
                        .WithMany()
                        .HasForeignKey("CompanyBranchId");

                    b.HasOne("Core.Models.ProductInventory", "ProductInventory")
                        .WithMany()
                        .HasForeignKey("ProductInventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyBranch");

                    b.Navigation("ProductInventory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Models.ProductType", b =>
                {
                    b.HasOne("Core.Models.CompanyBranch", "CompanyBranch")
                        .WithMany()
                        .HasForeignKey("CompanyBranchId");

                    b.Navigation("CompanyBranch");
                });

            modelBuilder.Entity("Core.Models.ProductVaccine", b =>
                {
                    b.HasOne("Core.Models.CompanyBranch", "CompanyBranch")
                        .WithMany()
                        .HasForeignKey("CompanyBranchId");

                    b.HasOne("Core.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyBranch");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Core.Models.Routine", b =>
                {
                    b.HasOne("Core.Models.CompanyBranch", "CompanyBranch")
                        .WithMany()
                        .HasForeignKey("CompanyBranchId");

                    b.HasOne("Core.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("CompanyBranch");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Core.Models.SaleDetail", b =>
                {
                    b.HasOne("Core.Models.ProductInventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.SalesLog", "SalesLog")
                        .WithMany()
                        .HasForeignKey("SalesLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("SalesLog");
                });

            modelBuilder.Entity("Core.Models.SalesLog", b =>
                {
                    b.HasOne("Core.Models.CompanyBranch", "CompanyBranch")
                        .WithMany()
                        .HasForeignKey("CompanyBranchId");

                    b.HasOne("Core.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Core.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("CompanyBranch");

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Models.SalesPayment", b =>
                {
                    b.HasOne("Core.Models.CompanyBranch", "CompanyBranch")
                        .WithMany()
                        .HasForeignKey("CompanyBranchId");

                    b.HasOne("Core.Models.PaymentMeans", "PaymentMeans")
                        .WithMany()
                        .HasForeignKey("PaymentMeansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.SalesLog", "SalesLog")
                        .WithMany()
                        .HasForeignKey("SalesLogsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyBranch");

                    b.Navigation("PaymentMeans");

                    b.Navigation("SalesLog");
                });

            modelBuilder.Entity("Core.Models.ScreenRole", b =>
                {
                    b.HasOne("Core.Models.CompanyBranch", "CompanyBranch")
                        .WithMany()
                        .HasForeignKey("CompanyBranchId");

                    b.Navigation("CompanyBranch");
                });

            modelBuilder.Entity("Core.Models.ShopCategory", b =>
                {
                    b.HasOne("Core.Models.CompanyBranch", "CompanyBranch")
                        .WithMany()
                        .HasForeignKey("CompanyBranchId");

                    b.Navigation("CompanyBranch");
                });

            modelBuilder.Entity("Core.Models.Supplier", b =>
                {
                    b.HasOne("Core.Models.CompanyBranch", "CompanyBranch")
                        .WithMany()
                        .HasForeignKey("CompanyBranchId");

                    b.Navigation("CompanyBranch");
                });

            modelBuilder.Entity("Core.Models.Transaction", b =>
                {
                    b.HasOne("Core.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Core.Models.ApplicationUser", "ConfirmedBy")
                        .WithMany()
                        .HasForeignKey("ConfirmedById");

                    b.Navigation("Company");

                    b.Navigation("ConfirmedBy");
                });

            modelBuilder.Entity("Core.Models.TransactionSetting", b =>
                {
                    b.HasOne("Core.Models.CompanyBranch", "CompanyBranch")
                        .WithMany()
                        .HasForeignKey("CompanyBranchId");

                    b.Navigation("CompanyBranch");
                });

            modelBuilder.Entity("Core.Models.Treatment", b =>
                {
                    b.HasOne("Core.Models.CompanyBranch", "CompanyBranch")
                        .WithMany()
                        .HasForeignKey("CompanyBranchId");

                    b.Navigation("CompanyBranch");
                });

            modelBuilder.Entity("Core.Models.UserLoginLog", b =>
                {
                    b.HasOne("Core.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Models.UserVerification", b =>
                {
                    b.HasOne("Core.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Models.VaccineSubscription", b =>
                {
                    b.HasOne("Core.Models.CompanyBranch", "CompanyBranch")
                        .WithMany()
                        .HasForeignKey("CompanyBranchId");

                    b.HasOne("Core.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyBranch");

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Core.Models.Visit", b =>
                {
                    b.HasOne("Core.Models.CompanyBranch", "CompanyBranch")
                        .WithMany()
                        .HasForeignKey("CompanyBranchId");

                    b.HasOne("Core.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyBranch");

                    b.Navigation("CreatedBy");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Core.Models.VisitTreatment", b =>
                {
                    b.HasOne("Core.Models.CompanyBranch", "CompanyBranch")
                        .WithMany()
                        .HasForeignKey("CompanyBranchId");

                    b.HasOne("Core.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Core.Models.Treatment", "Treatment")
                        .WithMany()
                        .HasForeignKey("TreatmentId");

                    b.HasOne("Core.Models.Visit", "Visit")
                        .WithMany()
                        .HasForeignKey("VisitId");

                    b.Navigation("CompanyBranch");

                    b.Navigation("CreatedBy");

                    b.Navigation("Treatment");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("Core.Models.Wallet", b =>
                {
                    b.HasOne("Core.Models.CompanyBranch", "CompanyBranch")
                        .WithMany()
                        .HasForeignKey("CompanyBranchId");

                    b.Navigation("CompanyBranch");
                });

            modelBuilder.Entity("Core.Models.WalletHistory", b =>
                {
                    b.HasOne("Core.Models.CompanyBranch", "CompanyBranch")
                        .WithMany()
                        .HasForeignKey("CompanyBranchId");

                    b.HasOne("Core.Models.Wallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId");

                    b.Navigation("CompanyBranch");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.ApplicationUser", b =>
                {
                    b.HasOne("Core.Models.CompanyBranch", "CompanyBranch")
                        .WithMany()
                        .HasForeignKey("CompanyBranchId");

                    b.Navigation("CompanyBranch");
                });

            modelBuilder.Entity("Core.Models.BookingGroup", b =>
                {
                    b.Navigation("CustomerBookings");
                });
#pragma warning restore 612, 618
        }
    }
}
